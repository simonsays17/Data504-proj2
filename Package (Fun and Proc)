/*Creation of the package in which to store procedures and functions for the project together
The package specificication below names which procedures and functions will be in the package a*/
create or replace package proj2 as
procedure show_customers;
procedure show_products;
procedure show_purchases;
procedure show_employees;
procedure show_logs;
procedure purchases_made(in_cid in purchases.cid%type);
function number_customers(n_pid in purchases.pid%type)
return number;
procedure add_customer(c_id in customers.cid%type, c_name in customers.name%type, c_telephone# in customers.telephone#%type);
procedure add_purchase(e_id in purchases.eid%type, p_id in purchases.pid%type, c_id in purchases.cid%type, pur_qty in purchases.qty%type, pur_unit_price in purchases.unit_price%type);
end;
/
show errors
/* package body creation */
create or replace package body proj2 as

/* creation of procedure to display all tuples for customers */
procedure show_customers is
begin
for r in(
select cid, name, telephone#, visits_made, last_visit_date
from customers)
loop
dbms_output.put_line(r.cid||','||r.name||','||r.telephone#||'.'|| r.visits_made||'.'||r.last_visit_date);
end loop;
end;
/* creation of procedure to display all tuples for employees */
procedure show_employees as
begin
for r in (
select eid, name, telephone#, email
from employees)
loop 
dbms_output.put_line(r.eid||','||r.name||','||r.telephone#||','|| r.email);
end loop;
end;

/* creation of procedure to display all tuples for products */
procedure show_products as
begin
for r in (
select pid, name, qoh, qoh_threshold, regular_price, discnt_rate
from products)
loop
dbms_output.put_line(r.pid||','||r.name||','||r.qoh||','|| r.qoh_threshold||','||r.regular_price||','||r.discnt_rate);
end loop;
end;

/* creation of procedure to display all tuples for purchases */
procedure show_purchases as
begin 
for r in(
select pur#, eid, pid, cid, pur_date, qty, unit_price, total, saving
from purchases)
loop
dbms_output.put_line(r.pur#||','||r.eid||','||r.pid||','|| r.cid||','||r.pur_date||','||r.qty||','||r.unit_price||','||r.total||','||r.saving);
end loop;
end;

/* creation of procedure to display all tuples for logs */
begin
for r in(
select log#, user_name, operation, op_time, table_name, tuple_pkey
from logs)
loop
dbms_output.put_line(r.log#||','||r.user_name||','||r.operation||','|| r.op_time||','||r.table_name||','||r.tuple_pkey);
end loop;
end;


/* creation of procedure to output pid, pur_date, qty, unit_price, total that an input of a specific CID has */
procedure purchases_made(in_cid in purchases.cid%type) as
begin
for r in (
select * from 
(select cid, name  
from customers 
where cid=in_cid) z, 
(select pid, pur_date, qty, unit_price, total from Purchases where cid=in_cid) y )
loop
dbms_output.put_line(r.cid||','||r.name||','||r.pid||','||r.pur_date||','||r.qty||','||r.unit_price||','||r.total);
end loop;
end;

/* creation of a function to report the number of customers who purchases a specfic product based on a pid that is inputed in the funciton*/
function number_customers(n_pid in Purchases.pid%TYPE)
	RETURN NUMBER
	IS cust_cnt NUMBER;
	BEGIN 
		SELECT COUNT(c.cid) 
		INTO cust_cnt
		FROM customers c, purchases p
		WHERE c.cid=p.cid AND p.pid=n_pid;
		RETURN(cust_cnt);
	EXCEPTION when NO_DATA_FOUND then
		dbms_output.put_line('Invalid product id');
	END;

/* creation of procedure to add a tuple into the customers table base on the inputs of cid, customer name, and customer telephone number*/
procedure add_customer(c_id in customers.cid%type, c_name in customers.name%type, c_telephone# in customers.telephone#%type)
is
c_visit_date customers.last_visit_date%type;
begin
select to_char(sysdate,'dd-mon-yy') into c_visit_date
from dual;
insert into customers values(c_id, c_name, c_telephone#, 1, c_visit_date);
end;

/* creation of procedure to add a tuple into the procedure table base on the inputs of eid, pid, cid, pur_qty, pur_unit_price*/
procedure add_purchase(e_id in purchases.eid%type, p_id in purchases.pid%type, c_id in purchases.cid%type, pur_qty in purchases.qty%type, pur_unit_price in purchases.unit_price%type) is 
nqoh products.qoh%type;
nprice purchases.total%type;
p_pur_date purchases.pur_date%type;
invalid_qty exception;
begin
select qoh into nqoh from products where pid= p_id;
select (pur_unit_price * (1-discnt_rate)) into nprice from products where pid=p_id; 
nprice:= nprice*pur_qty;
select to_char(sysdate,'dd-mon-yy') into p_pur_date
from dual;
if (pur_qty>nqoh) then
raise invalid_qty;
else
insert into purchases values(pur#_seq.nextval, e_id, p_id, c_id, p_pur_date, pur_qty, pur_unit_price, (pur_qty*pur_unit_price), nprice);
end if;
exception
when invalid_qty then
dbms_output.put_line('Insufficient qoh');
end;
end;
/

/*Creation of the package in which to store procedures and functions for the project together
The package specificication below names which procedures and functions will be in the package a*/
create or replace package proj2 as
procedure show_customers(new_emp out sys_refcursor);
procedure show_products(new_prod out sys_refcursor);
procedure show_purchases(new_purch out sys_refcursor);
procedure show_logs(new_logs out sys_refcursor);
procedure purchases_made(in_id in purchases.cid%type, pur_cur out sys_refcursor);
function number_customers(n_pid in purchases.pid%type)
return number;
procedure add_customer(c_id in customers.cid%type, c_name in customers.name%type, c_telephone# in customers.telephone#%type);
procedure add_purchase(e_id in purchases.eid%type, p_id in purchases.pid%type, c_id in purchases.cid%type, pur_qty in purchases.qty%type, pur_unit_price in purchases.unit_price%type);
end;
/
show errors
/* package body creation */
create or replace package body proj2 as

/* creation of procedure to display all tuples for customers */
procedure show_customers(new_emp out sys_refcursor) as
begin
open new_emp for
select cid, name, telephone#, visits_made, last_visit_date
from customers;
end;

/* creation of procedure to display all tuples for products */
procedure show_products(new_prod out sys_refcursor) as
begin
open new_prod for
select pid, name, qoh, qoh_threshold, regular_price, discnt_rate
from products;
end;

/* creation of procedure to display all tuples for purchases */
procedure show_purchases(new_purch out sys_refcursor) as
begin 
open new_purch for
select pur#, eid, pid, cid, pur_date, qty, unit_price, total, saving
from purchases;
end;

/* creation of procedure to display all tuples for logs */
procedure show_logs(new_logs out sys_refcursor) as
begin
open new_logs for
select log#, user_name, operation, op_time, table_name, tuple_pkey
from logs;
end;


/* creation of procedure to output pid, pur_date, qty, unit_price, total that an input of a specific CID has */
procedure purchases_made(in_id in purchases.cid%type, pur_cur out sys_refcursor) as
ncid customers.cid%type;
begin
select cid into ncid 
from customers 
where cid=in_id;
open pur_cur for
select c.name, p.pid, p.pur_date, p.qty, p.unit_price, p.total
from customers c, purchases p
where c.cid=p.cid and c.cid=ncid;
exception when NO_DATA_FOUND then
	dbms_output.put_line('Invalid customer id');
end;

/* creation of a function to report the number of customers who purchases a specfic product based on a pid that is inputed in the funciton*/
function number_customers(n_pid in Purchases.pid%TYPE)
	RETURN NUMBER
	IS cust_cnt NUMBER;
	BEGIN 
		SELECT COUNT(c.cid) 
		INTO cust_cnt
		FROM customers c, purchases p
		WHERE c.cid=p.cid AND p.pid=n_pid;
		RETURN(cust_cnt);
	EXCEPTION when NO_DATA_FOUND then
		dbms_output.put_line('Invalid product id');
	END;

/* creation of procedure to add a tuple into the customers table base on the inputs of cid, customer name, and customer telephone number*/
procedure add_customer(c_id in customers.cid%type, c_name in customers.name%type, c_telephone# in customers.telephone#%type)
is
c_visit_date customers.last_visit_date%type;
begin
select to_char(sysdate,'dd-mon-yy') into c_visit_date
from dual;
insert into customers values(c_id, c_name, c_telephone#, 1, c_visit_date);
end;

/* creation of procedure to add a tuple into the procedure table base on the inputs of eid, pid, cid, pur_qty, pur_unit_price*/
procedure add_purchase(e_id in purchases.eid%type, p_id in purchases.pid%type, c_id in purchases.cid%type, pur_qty in purchases.qty%type, pur_unit_price in purchases.unit_price%type)
is
p_pur_date purchases.pur_date%type;
p_regular_price products.regular_price%type;
p_qoh products.qoh%type;
status boolean;
invalid_qty exception;
begin
select to_char(sysdate,'dd-mon-yy') into p_pur_date
from dual;
select regular_price into p_regular_price
from purchases p, products r
where p.pid=r.pid and p.pid=p_id;
select qoh into p_qoh
from purchases p, products r
where p.pid=r.pid and p.pid=p_id;
insert into purchases values(pur#_seq.nextval, e_id, p_id, c_id, p_pur_date, pur_qty, pur_unit_price, pur_qty*pur_unit_price, p_regular_price-pur_qty*pur_unit_price);
status:= true;
if pur_qty>p_qoh then
raise invalid_qty;
end if;
exception
when invalid_qty then
status:= false;
dbms_output.put_line('Insufficient qoh');
end;
end;
/

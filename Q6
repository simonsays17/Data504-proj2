set serveroutput on
create or replace procedure add_purchase(e_id in purchases.eid%type, p_id in purchases.pid%type, c_id in purchases.cid%type, pur_qty in purchases.qty%type, pur_unit_price in purchases.unit_price%type)
is
p_pur_date purchases.pur_date%type;
p_regular_price products.regular_price%type;
p_qoh products.qoh%type;
status boolean;
invalid_qty exception;
begin
select to_char(sysdate,'dd-mon-yy') into p_pur_date
from dual;
select regular_price into p_regular_price
from purchases p, products r
where p.pid=r.pid and p.pid=p_id;
select qoh into p_qoh
from purchases p, products r
where p.pid=r.pid and p.pid=p_id;
insert into purchases values(pur#_seq.nextval, e_id, p_id, c_id, p_pur_date, pur_qty, pur_unit_price, pur_qty*pur_unit_price, p_regular_price-pur_qty*pur_unit_price);
status:= true;
if pur_qty>p_qoh then
raise invalid_qty;
end if;
exception
when invalid_qty then
status:= false;
dbms_output.put_line('Insufficient qoh');
end;
/

create or replace trigger qoh_trig
after insert on purchases
for each row
declare
qoh products.qoh%type;
nqoh products.qoh%type;
nqoh_t products.qoh_threshold%type;
low_qoh exception;
begin
update products set products.qoh = products.qoh - :new.qty where pid = :new.pid;
select qoh, qoh_threshold into nqoh, nqoh_t from products where pid = :new.pid;
if (qoh<nqoh_t) then raise low_qoh;
end if;
exception
when low_qoh then
dbms_output.put_line('The current qoh of the product is below the required threshold and new supply is required.');
update products set qoh=qoh_threshold+10;
dbms_output.put_line('New qoh is ' ||qoh);
end;
/

create or replace trigger visit_trig
after insert on purchases
for each row
declare 
new_visit customers.last_visit_date%type;
new_day exception;
begin 
select last_visit_date into new_visit
from customers c, purchases p
where c.cid=p.cid and pur#=:new.pur#;
if (:new.pur_date!= new_visit) then raise new_day;
end if;
exception
when new_day then
update customers set last_visit_date=:new.pur_date;
update customers set visits_made=visits_made+1;
end;
/
show errors
